import{_ as n,o as s,c as a,a as e}from"./app.a324704d.js";const p={},t=e(`<p>\u5728\u505A\u4E00\u4E9B\u7B97\u6CD5\u7684\u65F6\u5019\u4F1A\u7528\u5230\u4E00\u4E9B\u597D\u7528\u7684\u5E93\u51FD\u6570\u3001STL \u51FD\u6570\uFF0C\u603B\u7ED3\u6574\u7406\u4E00\u4E0B</p><h2 id="\u5E38\u7528\u5E93\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u5E38\u7528\u5E93\u51FD\u6570" aria-hidden="true">#</a> \u5E38\u7528\u5E93\u51FD\u6570</h2><h3 id="algorithm" tabindex="-1"><a class="header-anchor" href="#algorithm" aria-hidden="true">#</a> <code>algorithm</code></h3><ul><li><code>max_element</code> \u67E5\u8BE2\u6700\u5927\u503C\u6240\u5728\u7684\u7B2C\u4E00\u4E2A\u4F4D\u7F6E</li><li><code>min_element</code> \u67E5\u8BE2\u6700\u5C0F\u503C\u6240\u5728\u7684\u7B2C\u4E00\u4E2A\u4F4D\u7F6E</li><li><code>min</code>,<code>max</code></li><li><code>lower_bound(int* first,int* last,val)</code> \u67E5\u627E\u6709\u5E8F\u533A\u95F4 <code>[first\uFF0Clast]</code> \u4E2D\u7B2C\u4E00\u4E2A\u5927\u4E8E\u7B49\u4E8Ex\u7684\u4F4D\u7F6E</li><li><code>upper_bound</code> \u5927\u81F4\u548C <code>lower_bound</code> \u76F8\u540C\uFF0C\u4E0D\u8FC7\u67E5\u627E\u7684\u662F\u6709\u5E8F\u533A\u95F4 <code>[first\uFF0Clast]</code> \u4E2D\u7B2C\u4E00\u4E2A</li><li><code>void sort(RanIt first, RanIt last, Pred pr)</code> <code>first</code> \u6307\u5411\u5BB9\u5668\u9996\u5730\u5740\u7684\u6307\u9488\uFF08\u6570\u7EC4\u540D\uFF09\uFF1B<code>last</code> \u6307\u5411\u5BB9\u5668\u5C3E\u5730\u5740\u7684\u6307\u9488\uFF08\u6570\u7EC4\u540D + \u6570\u7EC4\u957F\u5EA6\uFF09\uFF1B<code>pr</code> \u6BD4\u8F83\u65B9\u6CD5\uFF08\u9ED8\u8BA4\u4E3A\u5347\u5E8F\uFF09</li><li><code>void fill(first,last,val)</code> <code>first</code> \u8D77\u59CB\u5730\u5740\uFF1B<code>last</code> \u672B\u5C3E\u5730\u5740\uFF1B<code>val</code> \u5C06\u8981\u66FF\u6362\u7684\u503C</li></ul><h3 id="stdlib-h" tabindex="-1"><a class="header-anchor" href="#stdlib-h" aria-hidden="true">#</a> <code>stdlib.h</code></h3><ul><li><code>atoi</code></li><li><code>atof</code> \u5B57\u7B26\u4E32\u8F6C\u6362\u4E3Adouble</li></ul><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> <code>string</code></h3><ul><li>getline</li></ul><h3 id="ctype-h" tabindex="-1"><a class="header-anchor" href="#ctype-h" aria-hidden="true">#</a> <code>ctype.h</code></h3><ul><li>tolower()/toupper() //\u503C\u5E76\u6CA1\u6709\u6539\u53D8</li><li>isalpha</li><li>isalnum</li><li>isdigit()\u3001isprint()</li><li>isalpha \uFF08\u5B57\u6BCD\uFF0C\u5305\u62EC\u5927\u5199\u3001\u5C0F\u5199\uFF09</li><li>islower\uFF08\u5C0F\u5199\u5B57\u6BCD\uFF09</li><li>isupper\uFF08\u5927\u5199\u5B57\u6BCD\uFF09</li><li>isalnum\uFF08\u5B57\u6BCD\u5927\u5199\u5C0F\u5199+\u6570\u5B57\uFF09</li><li>isblank\uFF08space\u548C\\t\uFF09</li><li>isspace\uFF08space\u3001\\t\u3001\\r\u3001\\n\uFF09</li></ul><h3 id="math-h" tabindex="-1"><a class="header-anchor" href="#math-h" aria-hidden="true">#</a> <code>math.h</code></h3><ul><li><code>double pow(double x, double y)</code> \u8FD4\u56DE <code>x</code> \u7684 <code>y</code> \u6B21\u65B9</li><li><code>double floor(double x)</code></li><li><code>floor()</code></li><li><code>atan()</code></li><li><code>fabs(double)</code> \u53D6 <code>double</code> \u7684\u7EDD\u5BF9\u503C\uFF1B</li><li><code>abs(int)</code> \u53D6 <code>int</code> \u7684\u7EDD\u5BF9\u503C\uFF1B</li><li><code>round(double)</code> \u5BF9 <code>double</code> \u7C7B\u578B\u8FDB\u884C\u56DB\u820D\u4E94\u5165\uFF1B</li><li><code>sqrt(double)</code> \u8FD4\u56DE <code>double</code> \u7684\u7B97\u672F\u5E73\u65B9\u6839\uFF1B</li></ul><h2 id="stl" tabindex="-1"><a class="header-anchor" href="#stl" aria-hidden="true">#</a> STL</h2><h3 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> vector</h3><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h3><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h3><h2 id="\u5404\u4E2A\u7C7B\u578B\u7684\u8F6C\u6362" tabindex="-1"><a class="header-anchor" href="#\u5404\u4E2A\u7C7B\u578B\u7684\u8F6C\u6362" aria-hidden="true">#</a> \u5404\u4E2A\u7C7B\u578B\u7684\u8F6C\u6362</h2><h3 id="\u4F7F\u7528-stringstream" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528-stringstream" aria-hidden="true">#</a> \u4F7F\u7528 stringstream</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span>
stringstream ss<span class="token punctuation">;</span>
string a<span class="token operator">=</span><span class="token string">&quot;12&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">;</span>
ss<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span>
ss<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5E38\u89C1\u6280\u5DE7-case" tabindex="-1"><a class="header-anchor" href="#\u5E38\u89C1\u6280\u5DE7-case" aria-hidden="true">#</a> \u5E38\u89C1\u6280\u5DE7 case</h2><h3 id="\u6700\u5927\u516C\u7EA6\u6570-\u516C\u500D\u6570-\u4E24\u6570\u76F8\u4E58-\u9664\u4EE5\u516C\u7EA6\u6570" tabindex="-1"><a class="header-anchor" href="#\u6700\u5927\u516C\u7EA6\u6570-\u516C\u500D\u6570-\u4E24\u6570\u76F8\u4E58-\u9664\u4EE5\u516C\u7EA6\u6570" aria-hidden="true">#</a> \u6700\u5927\u516C\u7EA6\u6570\uFF08\u516C\u500D\u6570 \u4E24\u6570\u76F8\u4E58 \u9664\u4EE5\u516C\u7EA6\u6570\uFF09</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">__gcd</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//cout &lt;&lt; __INT32_MAX__ &lt;&lt; endl;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="accumulate-\u6C42\u548C" tabindex="-1"><a class="header-anchor" href="#accumulate-\u6C42\u548C" aria-hidden="true">#</a> accumulate \u6C42\u548C</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;numeric&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//0\u662F\u7D2F\u52A0\u7684\u521D\u503C</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bitset-\u5B9E\u73B0\u5341\u8FDB\u5236\u548C\u4E8C\u8FDB\u5236\u7684\u4E92\u6362" tabindex="-1"><a class="header-anchor" href="#bitset-\u5B9E\u73B0\u5341\u8FDB\u5236\u548C\u4E8C\u8FDB\u5236\u7684\u4E92\u6362" aria-hidden="true">#</a> bitset \u5B9E\u73B0\u5341\u8FDB\u5236\u548C\u4E8C\u8FDB\u5236\u7684\u4E92\u6362</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bitset&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    bitset<span class="token operator">&lt;</span><span class="token number">32</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token punctuation">;</span>
    b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">to_ullong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span>a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> count</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">/*
count(begin,end, int)  \u5927\u4E8Eint\u578B\u7684\u6570
count_if(begin,end,fun)  \u81EA\u5B9A\u4E49\u51FD\u6570
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//for_each(a,a+9,print&lt;int&gt;) ;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> copy</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">/*
copy(begin,end,begin)
\u5C06\u7B2C\u4E00\u4E2A\u6570\u7EC4\u7684begin\u81F3end   \u8D4B\u503C\u5230\u7B2C\u4E8C\u4E2A\u5BB9\u5668begin\u5F00\u59CB
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span> <span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">;</span>  <span class="token comment">//</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u590D\u5236\u524D\u4E94\u4E2A</span>
    <span class="token function">for_each</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">,</span>print<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="find-if" tabindex="-1"><a class="header-anchor" href="#find-if" aria-hidden="true">#</a> find_if</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token function">find_if</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">/*
find_if(begin,end,greatThree)
\u627E\u5230\u5927\u4E8E\u4E09\u7684\u6240\u4EE5\u6240\u6709\u6570\uFF0Creturn \u9996\u5730\u5740   \u5C31\u662F\u4E00\u4E2A\u6570\u7EC4
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">greatThree</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>greatThree<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>

	<span class="token comment">//for_each(a,a+9,print&lt;int&gt;) ;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>find
<span class="token comment">/*
find\u8FD4\u56DE\u627E\u5230\u5143\u7D20\u7684\u5730\u5740
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-each" tabindex="-1"><a class="header-anchor" href="#for-each" aria-hidden="true">#</a> for_each()</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">for_each</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>print<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...\u5F85\u66F4\u65B0</p>`,37),c=[t];function o(l,i){return s(),a("div",null,c)}var r=n(p,[["render",o],["__file","2019-08-02-useful-cpp-lib.html.vue"]]);export{r as default};
