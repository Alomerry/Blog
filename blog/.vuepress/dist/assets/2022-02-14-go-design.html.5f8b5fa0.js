import{_ as n,o as s,c as a,a as t}from"./app.c3e71323.js";const p={},e=t(`<h2 id="\u8C03\u8BD5\u6E90\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u8C03\u8BD5\u6E90\u4EE3\u7801" aria-hidden="true">#</a> \u8C03\u8BD5\u6E90\u4EE3\u7801</h2><h3 id="\u4E2D\u95F4\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u4E2D\u95F4\u4EE3\u7801" aria-hidden="true">#</a> \u4E2D\u95F4\u4EE3\u7801</h3><p>\u6E90\u4EE3\u7801\u7F16\u8BD1\u6210\u6C47\u7F16</p><p><code>go build -gcflags -S main.go</code></p><p>\u83B7\u53D6\u6C47\u7F16\u4F18\u5316\u8FC7\u7A0B</p><p><code>GOSSAFUNC=main go build main.go</code></p><h2 id="\u7F16\u8BD1\u539F\u7406" tabindex="-1"><a class="header-anchor" href="#\u7F16\u8BD1\u539F\u7406" aria-hidden="true">#</a> \u7F16\u8BD1\u539F\u7406</h2><h3 id="\u7F16\u8BD1\u8FC7\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u7F16\u8BD1\u8FC7\u7A0B" aria-hidden="true">#</a> \u7F16\u8BD1\u8FC7\u7A0B</h3><h4 id="\u9884\u5907" tabindex="-1"><a class="header-anchor" href="#\u9884\u5907" aria-hidden="true">#</a> \u9884\u5907</h4><ul><li><p>\u62BD\u8C61\u8BED\u6CD5\u6811\uFF08abstract syntax tree, AST\uFF09 \u662F\u6E90\u4EE3\u7801\u8BED\u6CD5\u7684\u7ED3\u6784\u7684\u4E00\u79CD\u62BD\u8C61\u8868\u793A\uFF0C\u5B83\u7528\u6811\u72B6\u7684\u65B9\u5F0F\u8868\u793A\u7F16\u7A0B\u8BED\u8A00\u7684\u8BED\u6CD5\u7ED3\u67841\u3002\u62BD\u8C61\u8BED\u6CD5\u6811\u4E2D\u7684\u6BCF\u4E00\u4E2A\u8282\u70B9\u90FD\u8868\u793A\u6E90\u4EE3\u7801\u4E2D\u7684\u4E00\u4E2A\u5143\u7D20\uFF0C\u6BCF\u4E00\u68F5\u5B50\u6811\u90FD\u8868\u793A\u4E00\u4E2A\u8BED\u6CD5\u5143\u7D20</p></li><li><p>\u9759\u6001\u5355\u8D4B\u503C\uFF08static single assignment\uFF09 SSA \u662F\u4E2D\u95F4\u4EE3\u7801\u7684\u7279\u6027\uFF0C\u5982\u679C\u4E2D\u95F4\u4EE3\u7801\u5177\u6709\u9759\u6001\u5355\u8D4B\u503C\u7279\u6027\uFF0C\u90A3\u4E48\u6BCF\u4E2A\u53D8\u91CF\u53EA\u4F1A\u88AB\u8D4B\u503C\u4E00\u6B21\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>x <span class="token operator">:=</span> <span class="token number">1</span>
x <span class="token operator">:=</span> <span class="token number">2</span>
y <span class="token operator">:=</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7B2C\u4E00\u884C\u7684\u8D4B\u503C\u8BED\u53E5\u662F\u65E0\u4F5C\u7528\u7684\uFF0C\u4E0B\u9762\u662F\u5177\u6709 SSA \u7279\u6027\u7684\u4E2D\u95F4\u4EE3\u7801\uFF0C<code>x_1</code> \u548C <code>x_2</code> \u6CA1\u6709\u4EFB\u4F55\u5173\u7CFB</p></li><li><p>\u6307\u4EE4\u96C6</p></li></ul><h4 id="\u7F16\u8BD1\u56DB\u9636\u6BB5" tabindex="-1"><a class="header-anchor" href="#\u7F16\u8BD1\u56DB\u9636\u6BB5" aria-hidden="true">#</a> \u7F16\u8BD1\u56DB\u9636\u6BB5</h4><ul><li>\u8BCD\u6CD5\u5206\u6790\u548C\u8BED\u6CD5\u5206\u6790</li><li>\u7C7B\u578B\u68C0\u67E5</li><li>\u4E2D\u95F4\u4EE3\u7801\u751F\u6210</li><li>\u673A\u5668\u7801\u751F\u6210</li></ul><h2 id="\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> \u6570\u636E\u7ED3\u6784</h2><h3 id="\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4" aria-hidden="true">#</a> \u6570\u7EC4</h3><h4 id="\u6982\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u6982\u8FF0" aria-hidden="true">#</a> \u6982\u8FF0</h4><ul><li>\u5B58\u50A8\u7C7B\u578B\u76F8\u540C\u76F8\u540C\u3001\u5927\u5C0F\u4E0D\u540C\u7684\u6570\u7EC4\u7C7B\u578B\u4E0D\u4E00\u81F4</li></ul><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// NewArray returns a new fixed-length array Type.</span>
<span class="token keyword">func</span> <span class="token function">NewArray</span><span class="token punctuation">(</span>elem <span class="token operator">*</span>Type<span class="token punctuation">,</span> bound <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Type <span class="token punctuation">{</span>
<span class="token keyword">if</span> bound <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
<span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;NewArray: invalid bound %v&quot;</span><span class="token punctuation">,</span> bound<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
t <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span>TARRAY<span class="token punctuation">)</span>
t<span class="token punctuation">.</span>Extra <span class="token operator">=</span> <span class="token operator">&amp;</span>Array<span class="token punctuation">{</span>Elem<span class="token punctuation">:</span> elem<span class="token punctuation">,</span> Bound<span class="token punctuation">:</span> bound<span class="token punctuation">}</span>
t<span class="token punctuation">.</span><span class="token function">SetNotInHeap</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span><span class="token function">NotInHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u521D\u59CB\u5316" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316" aria-hidden="true">#</a> \u521D\u59CB\u5316</h4><h5 id="\u4E0A\u9650\u63A8\u5BFC" tabindex="-1"><a class="header-anchor" href="#\u4E0A\u9650\u63A8\u5BFC" aria-hidden="true">#</a> \u4E0A\u9650\u63A8\u5BFC</h5><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// The result of typecheckcomplit MUST be assigned back to n, e.g.</span>
<span class="token comment">// 	n.Left = typecheckcomplit(n.Left)</span>
<span class="token keyword">func</span> <span class="token function">typecheckcomplit</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> enableTrace <span class="token operator">&amp;&amp;</span> trace <span class="token punctuation">{</span>
<span class="token keyword">defer</span> <span class="token function">tracePrint</span><span class="token punctuation">(</span><span class="token string">&quot;typecheckcomplit&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

lno <span class="token operator">:=</span> lineno
<span class="token keyword">defer</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
lineno <span class="token operator">=</span> lno
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> n<span class="token punctuation">.</span>Right <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
<span class="token function">yyerrorl</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Pos<span class="token punctuation">,</span> <span class="token string">&quot;missing type in composite literal&quot;</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span>Type <span class="token operator">=</span> <span class="token boolean">nil</span>
<span class="token keyword">return</span> n
<span class="token punctuation">}</span>

<span class="token comment">// Save original node (including n.Right)</span>
n<span class="token punctuation">.</span>Orig <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setlineno</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>

<span class="token comment">// Need to handle [...]T arrays specially.</span>
<span class="token keyword">if</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Op <span class="token operator">==</span> OTARRAY <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Op <span class="token operator">==</span> ODDD <span class="token punctuation">{</span>
n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> ctxType<span class="token punctuation">)</span>
<span class="token keyword">if</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
n<span class="token punctuation">.</span>Type <span class="token operator">=</span> <span class="token boolean">nil</span>
<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
elemType <span class="token operator">:=</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Type

length <span class="token operator">:=</span> <span class="token function">typecheckarraylit</span><span class="token punctuation">(</span>elemType<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;array literal&quot;</span><span class="token punctuation">)</span>

n<span class="token punctuation">.</span>Op <span class="token operator">=</span> OARRAYLIT
n<span class="token punctuation">.</span>Type <span class="token operator">=</span> types<span class="token punctuation">.</span><span class="token function">NewArray</span><span class="token punctuation">(</span>elemType<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token boolean">nil</span>
<span class="token keyword">return</span> n
<span class="token punctuation">}</span>

n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> ctxType<span class="token punctuation">)</span>
t <span class="token operator">:=</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Type
<span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
n<span class="token punctuation">.</span>Type <span class="token operator">=</span> <span class="token boolean">nil</span>
<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
n<span class="token punctuation">.</span>Type <span class="token operator">=</span> t

<span class="token keyword">switch</span> t<span class="token punctuation">.</span>Etype <span class="token punctuation">{</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;invalid composite literal type %v&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
n<span class="token punctuation">.</span>Type <span class="token operator">=</span> <span class="token boolean">nil</span>

<span class="token keyword">case</span> TARRAY<span class="token punctuation">:</span>
<span class="token function">typecheckarraylit</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;array literal&quot;</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span>Op <span class="token operator">=</span> OARRAYLIT
n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token boolean">nil</span>

<span class="token keyword">case</span> TSLICE<span class="token punctuation">:</span>
length <span class="token operator">:=</span> <span class="token function">typecheckarraylit</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;slice literal&quot;</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span>Op <span class="token operator">=</span> OSLICELIT
n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token function">nodintconst</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>

<span class="token keyword">case</span> TMAP<span class="token punctuation">:</span>
<span class="token keyword">var</span> cs constSet
<span class="token keyword">for</span> i3<span class="token punctuation">,</span> l <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">setlineno</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
<span class="token keyword">if</span> l<span class="token punctuation">.</span>Op <span class="token operator">!=</span> OKEY <span class="token punctuation">{</span>
n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">SetIndex</span><span class="token punctuation">(</span>i3<span class="token punctuation">,</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> ctxExpr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;missing key in map literal&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">continue</span>
<span class="token punctuation">}</span>

r <span class="token operator">:=</span> l<span class="token punctuation">.</span>Left
r <span class="token operator">=</span> <span class="token function">pushtype</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
r <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ctxExpr<span class="token punctuation">)</span>
l<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token function">assignconv</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;map key&quot;</span><span class="token punctuation">)</span>
cs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lineno<span class="token punctuation">,</span> l<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> <span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;map literal&quot;</span><span class="token punctuation">)</span>

r <span class="token operator">=</span> l<span class="token punctuation">.</span>Right
r <span class="token operator">=</span> <span class="token function">pushtype</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
r <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ctxExpr<span class="token punctuation">)</span>
l<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token function">assignconv</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;map value&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

n<span class="token punctuation">.</span>Op <span class="token operator">=</span> OMAPLIT
n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token boolean">nil</span>

<span class="token keyword">case</span> TSTRUCT<span class="token punctuation">:</span>
<span class="token comment">// Need valid field offsets for Xoffset below.</span>
<span class="token function">dowidth</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>

errored <span class="token operator">:=</span> <span class="token boolean">false</span>
<span class="token keyword">if</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">nokeys</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>List<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// simple list of variables</span>
ls <span class="token operator">:=</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> n1 <span class="token operator">:=</span> <span class="token keyword">range</span> ls <span class="token punctuation">{</span>
<span class="token function">setlineno</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>
n1 <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> ctxExpr<span class="token punctuation">)</span>
ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n1
<span class="token keyword">if</span> i <span class="token operator">&gt;=</span> t<span class="token punctuation">.</span><span class="token function">NumFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token operator">!</span>errored <span class="token punctuation">{</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;too many values in %v&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
errored <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token keyword">continue</span>
<span class="token punctuation">}</span>

f <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
s <span class="token operator">:=</span> f<span class="token punctuation">.</span>Sym
<span class="token keyword">if</span> s <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>types<span class="token punctuation">.</span><span class="token function">IsExported</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>Pkg <span class="token operator">!=</span> localpkg <span class="token punctuation">{</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;implicit assignment of unexported field &#39;%s&#39; in %v literal&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// No pushtype allowed here. Must name fields for that.</span>
n1 <span class="token operator">=</span> <span class="token function">assignconv</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> <span class="token string">&quot;field value&quot;</span><span class="token punctuation">)</span>
n1 <span class="token operator">=</span> <span class="token function">nodSym</span><span class="token punctuation">(</span>OSTRUCTKEY<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Sym<span class="token punctuation">)</span>
n1<span class="token punctuation">.</span>Xoffset <span class="token operator">=</span> f<span class="token punctuation">.</span>Offset
ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n1
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span> <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">NumFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;too few values in %v&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
hash <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span>

<span class="token comment">// keyed list</span>
ls <span class="token operator">:=</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> l <span class="token operator">:=</span> <span class="token keyword">range</span> ls <span class="token punctuation">{</span>
<span class="token function">setlineno</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>

<span class="token keyword">if</span> l<span class="token punctuation">.</span>Op <span class="token operator">==</span> OKEY <span class="token punctuation">{</span>
key <span class="token operator">:=</span> l<span class="token punctuation">.</span>Left

l<span class="token punctuation">.</span>Op <span class="token operator">=</span> OSTRUCTKEY
l<span class="token punctuation">.</span>Left <span class="token operator">=</span> l<span class="token punctuation">.</span>Right
l<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token boolean">nil</span>

<span class="token comment">// An OXDOT uses the Sym field to hold</span>
<span class="token comment">// the field to the right of the dot,</span>
<span class="token comment">// so s will be non-nil, but an OXDOT</span>
<span class="token comment">// is never a valid struct literal key.</span>
<span class="token keyword">if</span> key<span class="token punctuation">.</span>Sym <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> key<span class="token punctuation">.</span>Op <span class="token operator">==</span> OXDOT <span class="token operator">||</span> key<span class="token punctuation">.</span>Sym<span class="token punctuation">.</span><span class="token function">IsBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;invalid field name %v in struct initializer&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
l<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> ctxExpr<span class="token punctuation">)</span>
<span class="token keyword">continue</span>
<span class="token punctuation">}</span>

<span class="token comment">// Sym might have resolved to name in other top-level</span>
<span class="token comment">// package, because of import dot. Redirect to correct sym</span>
<span class="token comment">// before we do the lookup.</span>
s <span class="token operator">:=</span> key<span class="token punctuation">.</span>Sym
<span class="token keyword">if</span> s<span class="token punctuation">.</span>Pkg <span class="token operator">!=</span> localpkg <span class="token operator">&amp;&amp;</span> types<span class="token punctuation">.</span><span class="token function">IsExported</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
s1 <span class="token operator">:=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token keyword">if</span> s1<span class="token punctuation">.</span>Origpkg <span class="token operator">==</span> s<span class="token punctuation">.</span>Pkg <span class="token punctuation">{</span>
s <span class="token operator">=</span> s1
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
l<span class="token punctuation">.</span>Sym <span class="token operator">=</span> s
<span class="token punctuation">}</span>

<span class="token keyword">if</span> l<span class="token punctuation">.</span>Op <span class="token operator">!=</span> OSTRUCTKEY <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token operator">!</span>errored <span class="token punctuation">{</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;mixture of field:value and value initializers&quot;</span><span class="token punctuation">)</span>
errored <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ctxExpr<span class="token punctuation">)</span>
<span class="token keyword">continue</span>
<span class="token punctuation">}</span>

f <span class="token operator">:=</span> <span class="token function">lookdot1</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>Sym<span class="token punctuation">,</span> t<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> ci <span class="token operator">:=</span> <span class="token function">lookdot1</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>Sym<span class="token punctuation">,</span> t<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ci <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// Case-insensitive lookup.</span>
<span class="token keyword">if</span> <span class="token function">visible</span><span class="token punctuation">(</span>ci<span class="token punctuation">.</span>Sym<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;unknown field &#39;%v&#39; in struct literal of type %v (but does have %v)&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>Sym<span class="token punctuation">,</span> t<span class="token punctuation">,</span> ci<span class="token punctuation">.</span>Sym<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">nonexported</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>Sym<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">.</span>Sym<span class="token punctuation">.</span>Name <span class="token operator">==</span> ci<span class="token punctuation">.</span>Sym<span class="token punctuation">.</span>Name <span class="token punctuation">{</span> <span class="token comment">// Ensure exactness before the suggestion.</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;cannot refer to unexported field &#39;%v&#39; in struct literal of type %v&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>Sym<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;unknown field &#39;%v&#39; in struct literal of type %v&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>Sym<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">continue</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">*</span>types<span class="token punctuation">.</span>Field
p<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">dotpath</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>Sym<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> p <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> f<span class="token punctuation">.</span><span class="token function">IsMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;unknown field &#39;%v&#39; in struct literal of type %v&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>Sym<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">continue</span>
<span class="token punctuation">}</span>
<span class="token comment">// dotpath returns the parent embedded types in reverse order.</span>
<span class="token keyword">var</span> ep <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token keyword">for</span> ei <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> ei <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> ei<span class="token operator">--</span> <span class="token punctuation">{</span>
ep <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> p<span class="token punctuation">[</span>ei<span class="token punctuation">]</span><span class="token punctuation">.</span>field<span class="token punctuation">.</span>Sym<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
ep <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> l<span class="token punctuation">.</span>Sym<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token string">&quot;cannot use promoted field %v in struct literal of type %v&quot;</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">continue</span>
<span class="token punctuation">}</span>
<span class="token function">fielddup</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>Sym<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
l<span class="token punctuation">.</span>Xoffset <span class="token operator">=</span> f<span class="token punctuation">.</span>Offset

<span class="token comment">// No pushtype allowed here. Tried and rejected.</span>
l<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> ctxExpr<span class="token punctuation">)</span>
l<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token function">assignconv</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> <span class="token string">&quot;field value&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

n<span class="token punctuation">.</span>Op <span class="token operator">=</span> OSTRUCTLIT
n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="\u8BED\u53E5\u8F6C\u5316" tabindex="-1"><a class="header-anchor" href="#\u8BED\u53E5\u8F6C\u5316" aria-hidden="true">#</a> \u8BED\u53E5\u8F6C\u5316</h5><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">anylit</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> var_ <span class="token operator">*</span>Node<span class="token punctuation">,</span> init <span class="token operator">*</span>Nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
t <span class="token operator">:=</span> n<span class="token punctuation">.</span>Type
<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
<span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;anylit: not lit, op=%v node=%v&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Op<span class="token punctuation">,</span> n<span class="token punctuation">)</span>

<span class="token keyword">case</span> ONAME<span class="token punctuation">:</span>
a <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> ctxStmt<span class="token punctuation">)</span>
init<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token keyword">case</span> OPTRLIT<span class="token punctuation">:</span>
<span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">IsPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;anylit: not ptr&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> r <span class="token operator">*</span>Node
<span class="token keyword">if</span> n<span class="token punctuation">.</span>Right <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
<span class="token comment">// n.Right is stack temporary used as backing store.</span>
init<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// zero backing store, just in case (#18410)</span>
r <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OADDR<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
r <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ctxExpr<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
r <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>ONEW<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span><span class="token function">SetTypecheck</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>Type <span class="token operator">=</span> t
r<span class="token punctuation">.</span>Esc <span class="token operator">=</span> n<span class="token punctuation">.</span>Esc
<span class="token punctuation">}</span>

r <span class="token operator">=</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
a <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> r<span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> ctxStmt<span class="token punctuation">)</span>
init<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

var_ <span class="token operator">=</span> <span class="token function">nod</span><span class="token punctuation">(</span>ODEREF<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
var_ <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>var_<span class="token punctuation">,</span> ctxExpr<span class="token operator">|</span>ctxAssign<span class="token punctuation">)</span>
<span class="token function">anylit</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> init<span class="token punctuation">)</span>

<span class="token keyword">case</span> OSTRUCTLIT<span class="token punctuation">,</span> OARRAYLIT<span class="token punctuation">:</span>
<span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">IsStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">IsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;anylit: not struct/array&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> var_<span class="token punctuation">.</span><span class="token function">isSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token punctuation">{</span>
<span class="token comment">// lay out static data</span>
vstat <span class="token operator">:=</span> <span class="token function">readonlystaticname</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>

ctxt <span class="token operator">:=</span> inInitFunction
<span class="token keyword">if</span> n<span class="token punctuation">.</span>Op <span class="token operator">==</span> OARRAYLIT <span class="token punctuation">{</span>
ctxt <span class="token operator">=</span> inNonInitFunction
<span class="token punctuation">}</span>
<span class="token function">fixedlit</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">,</span> initKindStatic<span class="token punctuation">,</span> n<span class="token punctuation">,</span> vstat<span class="token punctuation">,</span> init<span class="token punctuation">)</span>

<span class="token comment">// copy static to var</span>
a <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> vstat<span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> ctxStmt<span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
init<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment">// add expressions to automatic</span>
<span class="token function">fixedlit</span><span class="token punctuation">(</span>inInitFunction<span class="token punctuation">,</span> initKindDynamic<span class="token punctuation">,</span> n<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
<span class="token keyword">break</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> components <span class="token builtin">int64</span>
<span class="token keyword">if</span> n<span class="token punctuation">.</span>Op <span class="token operator">==</span> OARRAYLIT <span class="token punctuation">{</span>
components <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">NumElem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
components <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">NumFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// initialization of an array or struct with unspecified components (missing fields or arrays)</span>
<span class="token keyword">if</span> var_<span class="token punctuation">.</span><span class="token function">isSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> components <span class="token punctuation">{</span>
a <span class="token operator">:=</span> <span class="token function">nod</span><span class="token punctuation">(</span>OAS<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token function">typecheck</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> ctxStmt<span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token function">walkexpr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
init<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">fixedlit</span><span class="token punctuation">(</span>inInitFunction<span class="token punctuation">,</span> initKindLocalCode<span class="token punctuation">,</span> n<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> init<span class="token punctuation">)</span>

<span class="token keyword">case</span> OSLICELIT<span class="token punctuation">:</span>
<span class="token function">slicelit</span><span class="token punctuation">(</span>inInitFunction<span class="token punctuation">,</span> n<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> init<span class="token punctuation">)</span>

<span class="token keyword">case</span> OMAPLIT<span class="token punctuation">:</span>
<span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">IsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;anylit: not map&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">maplit</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> var_<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>\u5F53\u5143\u7D20\u5C11\u4E8E\u6216\u7B49\u4E8E 4</p></li><li><p>\u5F53\u5143\u7D20\u591A\u4E8E 4</p></li></ul><h4 id="\u8BBF\u95EE\u548C\u8D4B\u503C" tabindex="-1"><a class="header-anchor" href="#\u8BBF\u95EE\u548C\u8D4B\u503C" aria-hidden="true">#</a> \u8BBF\u95EE\u548C\u8D4B\u503C</h4><p>\u68C0\u67E5\u6570\u7EC4\u8D8A\u754C</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">typecheck1</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">,</span> top <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// failures in the comparisons for s[x], 0 &lt;= x &lt; y (y == len(s))</span>
<span class="token keyword">func</span> <span class="token function">goPanicIndex</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">panicCheck1</span><span class="token punctuation">(</span><span class="token function">getcallerpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;index out of range&quot;</span><span class="token punctuation">)</span>
<span class="token function">panic</span><span class="token punctuation">(</span>boundsError<span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token function">int64</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> signed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token punctuation">,</span> code<span class="token punctuation">:</span> boundsIndex<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5207\u7247" tabindex="-1"><a class="header-anchor" href="#\u5207\u7247" aria-hidden="true">#</a> \u5207\u7247</h3><p>\u5207\u7247\u5728\u7F16\u8BD1\u671F\u751F\u6210\u7684\u7C7B\u578B\u53EA\u4F1A\u5305\u542B\u5207\u7247\u4E2D\u7684\u5143\u7D20\u7C7B\u578B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewSlice</span><span class="token punctuation">(</span>elem <span class="token operator">*</span>Type<span class="token punctuation">)</span> <span class="token operator">*</span>Type <span class="token punctuation">{</span>
<span class="token keyword">if</span> t <span class="token operator">:=</span> elem<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span>slice<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> elem <span class="token punctuation">{</span>
<span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;elem mismatch&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> t
<span class="token punctuation">}</span>

t <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span>TSLICE<span class="token punctuation">)</span>
t<span class="token punctuation">.</span>Extra <span class="token operator">=</span> Slice<span class="token punctuation">{</span>Elem<span class="token punctuation">:</span> elem<span class="token punctuation">}</span>
elem<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span>slice <span class="token operator">=</span> t
<span class="token keyword">return</span> t
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u6570\u636E\u7ED3\u6784-1" tabindex="-1"><a class="header-anchor" href="#\u6570\u636E\u7ED3\u6784-1" aria-hidden="true">#</a> \u6570\u636E\u7ED3\u6784</h4><p>\u7F16\u8BD1\u671F\u7684\u5207\u7247\u662F <code>types.Slice</code> \u7C7B\u578B\uFF0C\u8FD0\u884C\u65F6\u5207\u7247\u53EF\u7531 <code>reflect.SliceHeader</code> \u7ED3\u6784\u4F53\u8868\u793A\uFF0C\u5176\u4E2D\uFF1A</p><ul><li><code>Data</code> \u662F\u6307\u5411\u6570\u7EC4\u7684\u6307\u9488</li><li><code>Len</code> \u662F\u5F53\u524D\u5207\u7247\u7684\u957F\u5EA6</li><li><code>Cap</code>\u662F\u5F53\u524D\u5207\u7247\u7684\u5BB9\u91CF\uFF0C\u5373 <code>Data</code> \u6570\u7EC4\u7684\u5927\u5C0F</li></ul><p>\u5207\u7247\u5BF9\u6570\u7EC4\u7684\u5F15\u7528\uFF0C\u53EF\u4EE5\u5728\u8FD0\u884C\u65F6\u4FEE\u6539\u5B83\u7684\u957F\u5EA6\u548C\u8303\u56F4\u3002\u5F53\u5207\u7247\u5E95\u5C42\u6570\u7EC4\u4E0D\u8DB3\u65F6\u4F1A\u53D1\u751F\u6269\u5BB9\uFF0C\u5207\u7247\u6307\u5411\u7684\u6570\u7EC4\u53EF\u80FD\u4F1A\u53D1\u751F\u53D8\u5316\u3002</p><h4 id="\u521D\u59CB\u5316-1" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316-1" aria-hidden="true">#</a> \u521D\u59CB\u5316</h4><h5 id="\u4F7F\u7528\u4E0B\u6807" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u4E0B\u6807" aria-hidden="true">#</a> \u4F7F\u7528\u4E0B\u6807</h5><p><code>arr[0:3] or slice[0:3]</code>\uFF0C\u7F16\u8BD1\u5668\u4F1A\u5C06\u8BED\u53E5\u8F6C\u4E3A <code>OpSliceMake</code> \u64CD\u4F5C\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
slice <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">return</span> slice
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528 <code>GOSSAFUNC</code> \u53D8\u91CF\u7F16\u8BD1\u4E0A\u8FF0\u4EE3\u7801\u53EF\u4EE5\u5F97\u5230\u4E00\u7CFB\u5217 SSA \u4E2D\u95F4\u4EE3\u7801\uFF0C\u5176\u4E2D <code>slice := arr[0:1]</code> \u8BED\u53E5\u5728 \u201Cdecompose builtin\u201D \u9636\u6BB5\u5BF9\u5E94\u7684\u4EE3\u7801\u5982\u4E0B\u6240\u793A\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">27</span> <span class="token punctuation">(</span>+5<span class="token punctuation">)</span> <span class="token operator">=</span> SliceMake <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>int<span class="token operator">&gt;</span> v11 v14 v17

name <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>*<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>int<span class="token punctuation">]</span>: v11
name slice.ptr<span class="token punctuation">[</span>*int<span class="token punctuation">]</span>: v11
name slice.len<span class="token punctuation">[</span>int<span class="token punctuation">]</span>: v14
name slice.cap<span class="token punctuation">[</span>int<span class="token punctuation">]</span>: v17
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u54C8\u5E0C\u8868" tabindex="-1"><a class="header-anchor" href="#\u54C8\u5E0C\u8868" aria-hidden="true">#</a> \u54C8\u5E0C\u8868</h3><h3 id="\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u5B57\u7B26\u4E32</h3><h2 id="\u8BED\u8A00\u57FA\u7840" tabindex="-1"><a class="header-anchor" href="#\u8BED\u8A00\u57FA\u7840" aria-hidden="true">#</a> \u8BED\u8A00\u57FA\u7840</h2><h3 id="\u51FD\u6570\u8C03\u7528" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u8C03\u7528" aria-hidden="true">#</a> \u51FD\u6570\u8C03\u7528</h3><h3 id="\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#\u63A5\u53E3" aria-hidden="true">#</a> \u63A5\u53E3</h3><h3 id="\u53CD\u5C04" tabindex="-1"><a class="header-anchor" href="#\u53CD\u5C04" aria-hidden="true">#</a> \u53CD\u5C04</h3><h2 id="\u5E38\u7528\u5173\u952E\u5B57" tabindex="-1"><a class="header-anchor" href="#\u5E38\u7528\u5173\u952E\u5B57" aria-hidden="true">#</a> \u5E38\u7528\u5173\u952E\u5B57</h2><h3 id="for-\u548C-range" tabindex="-1"><a class="header-anchor" href="#for-\u548C-range" aria-hidden="true">#</a> for \u548C range</h3><h4 id="\u73B0\u8C61" tabindex="-1"><a class="header-anchor" href="#\u73B0\u8C61" aria-hidden="true">#</a> \u73B0\u8C61</h4><p>\u5FAA\u73AF\u6C38\u52A8\u673A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
arr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728\u904D\u5386\u5207\u7247\u65F6\u8FFD\u52A0\u7684\u5143\u7D20\u4E0D\u4F1A\u589E\u52A0\u5FAA\u73AF\u7684\u6267\u884C\u6B21\u6570\u3002</p><p>\u795E\u5947\u7684\u6307\u9488</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
newArr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
newArr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newArr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> newArr <span class="token punctuation">{</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u904D\u5386\u6E05\u7A7A\u6570\u7EC4</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u968F\u673A\u904D\u5386</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
hash <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>
<span class="token string">&quot;1&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token string">&quot;2&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token string">&quot;3&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> hash <span class="token punctuation">{</span>
<span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u7ECF\u5178\u5FAA\u73AF" tabindex="-1"><a class="header-anchor" href="#\u7ECF\u5178\u5FAA\u73AF" aria-hidden="true">#</a> \u7ECF\u5178\u5FAA\u73AF</h4><p>Go \u8BED\u8A00\u4E2D\u7684\u7ECF\u5178\u5FAA\u73AF\u5728\u7F16\u8BD1\u5668\u770B\u6765\u662F\u4E00\u4E2A <code>OFOR</code> \u7C7B\u578B\u7684\u8282\u70B9\uFF0C\u8FD9\u4E2A\u8282\u70B9\u7531\u4EE5\u4E0B\u56DB\u4E2A\u90E8\u5206\u7EC4\u6210\uFF1A</p><ul><li>\u521D\u59CB\u5316\u5FAA\u73AF\u7684 <code>Ninit</code></li><li>\u5FAA\u73AF\u7684\u7EE7\u7EED\u6761\u4EF6 <code>Left</code></li><li>\u5FAA\u73AF\u4F53\u7ED3\u675F\u65F6\u6267\u884C\u7684 <code>Right</code></li><li>\u5FAA\u73AF\u4F53 <code>NBody</code></li></ul><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">for</span> Ninit<span class="token punctuation">;</span> Left<span class="token punctuation">;</span> Right <span class="token punctuation">{</span>
NBody
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728\u751F\u6210 SSA \u4E2D\u95F4\u4EE3\u7801\u7684\u9636\u6BB5\uFF0C<a href="https://draveness.me/golang/tree/cmd/compile/internal/gc.state.stmt" target="_blank" rel="noopener noreferrer"><code>cmd/compile/internal/gc.state.stmt</code></a> \u65B9\u6CD5\u5728\u53D1\u73B0\u4F20\u5165\u7684\u8282\u70B9\u7C7B\u578B\u662F <code>OFOR</code> \u65F6\u4F1A\u6267\u884C\u4EE5\u4E0B\u7684\u4EE3\u7801\u5757\uFF0C\u8FD9\u6BB5\u4EE3\u7801\u4F1A\u5C06\u5FAA\u73AF\u4E2D\u7684\u4EE3\u7801\u5206\u6210\u4E0D\u540C\u7684\u5757\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>state<span class="token punctuation">)</span> <span class="token function">stmt</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
<span class="token keyword">case</span> OFOR<span class="token punctuation">,</span> OFORUNTIL<span class="token punctuation">:</span>
bCond<span class="token punctuation">,</span> bBody<span class="token punctuation">,</span> bIncr<span class="token punctuation">,</span> bEnd <span class="token operator">:=</span> <span class="token operator">...</span>

b <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">endBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span><span class="token function">AddEdgeTo</span><span class="token punctuation">(</span>bCond<span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">startBlock</span><span class="token punctuation">(</span>bCond<span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">condBranch</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> bBody<span class="token punctuation">,</span> bEnd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

s<span class="token punctuation">.</span><span class="token function">startBlock</span><span class="token punctuation">(</span>bBody<span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">stmtList</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Nbody<span class="token punctuation">)</span>

b<span class="token punctuation">.</span><span class="token function">AddEdgeTo</span><span class="token punctuation">(</span>bIncr<span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">startBlock</span><span class="token punctuation">(</span>bIncr<span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">stmt</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>
b<span class="token punctuation">.</span><span class="token function">AddEdgeTo</span><span class="token punctuation">(</span>bCond<span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">startBlock</span><span class="token punctuation">(</span>bEnd<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u8303\u56F4\u5FAA\u73AF" tabindex="-1"><a class="header-anchor" href="#\u8303\u56F4\u5FAA\u73AF" aria-hidden="true">#</a> \u8303\u56F4\u5FAA\u73AF</h4><p>\u6570\u7EC4\u548C\u5207\u7247</p><p>\u5BF9\u4E8E\u6570\u7EC4\u548C\u5207\u7247\u6765\u8BF4\uFF0CGo \u8BED\u8A00\u6709\u4E09\u79CD\u4E0D\u540C\u7684\u904D\u5386\u65B9\u5F0F\uFF0C\u8FD9\u4E09\u79CD\u4E0D\u540C\u7684\u904D\u5386\u65B9\u5F0F\u5206\u522B\u5BF9\u5E94\u7740\u4EE3\u7801\u4E2D\u7684\u4E0D\u540C\u6761\u4EF6\uFF0C\u5B83\u4EEC\u4F1A\u5728 <a href="https://draveness.me/golang/tree/cmd/compile/internal/gc.walkrange" target="_blank" rel="noopener noreferrer"><code>cmd/compile/internal/gc.walkrange</code></a> \u51FD\u6570\u4E2D\u8F6C\u6362\u6210\u4E0D\u540C\u7684\u63A7\u5236\u903B\u8F91\uFF0C\u6211\u4EEC\u4F1A\u5206\u6210\u51E0\u79CD\u60C5\u51B5\u5206\u6790\u8BE5\u51FD\u6570\u7684\u903B\u8F91\uFF1A</p><ol><li>\u5206\u6790\u904D\u5386\u6570\u7EC4\u548C\u5207\u7247\u6E05\u7A7A\u5143\u7D20\u7684\u60C5\u51B5\uFF1B</li><li>\u5206\u6790\u4F7F\u7528 <code>for range a {}</code> \u904D\u5386\u6570\u7EC4\u548C\u5207\u7247\uFF0C\u4E0D\u5173\u5FC3\u7D22\u5F15\u548C\u6570\u636E\u7684\u60C5\u51B5\uFF1B</li><li>\u5206\u6790\u4F7F\u7528 <code>for i := range a {}</code> \u904D\u5386\u6570\u7EC4\u548C\u5207\u7247\uFF0C\u53EA\u5173\u5FC3\u7D22\u5F15\u7684\u60C5\u51B5\uFF1B</li><li>\u5206\u6790\u4F7F\u7528 <code>for i, elem := range a {}</code> \u904D\u5386\u6570\u7EC4\u548C\u5207\u7247\uFF0C\u5173\u5FC3\u7D22\u5F15\u548C\u6570\u636E\u7684\u60C5\u51B5\uFF1B</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">walkrange</span><span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
<span class="token keyword">switch</span> t<span class="token punctuation">.</span>Etype <span class="token punctuation">{</span>
<span class="token keyword">case</span> TARRAY<span class="token punctuation">,</span> TSLICE<span class="token punctuation">:</span>
<span class="token keyword">if</span> <span class="token function">arrayClear</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go</p><p><a href="https://draveness.me/golang/tree/cmd/compile/internal/gc.arrayClear" target="_blank" rel="noopener noreferrer"><code>cmd/compile/internal/gc.arrayClear</code></a> \u4F1A\u4F18\u5316 Go \u8BED\u8A00\u904D\u5386\u6570\u7EC4\u6216\u8005\u5207\u7247\u5E76\u5220\u9664\u5168\u90E8\u5143\u7D20\u7684\u903B\u8F91\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// \u539F\u4EE3\u7801</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> zero
<span class="token punctuation">}</span>

<span class="token comment">// \u4F18\u5316\u540E</span>
<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
hp <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
hn <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span>hp<span class="token punctuation">,</span> hn<span class="token punctuation">)</span>
i <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u76F8\u6BD4\u4E8E\u4F9D\u6B21\u6E05\u9664\u6570\u7EC4\u6216\u8005\u5207\u7247\u4E2D\u7684\u6570\u636E\uFF0CGo \u8BED\u8A00\u4F1A\u76F4\u63A5\u4F7F\u7528 <a href="https://draveness.me/golang/tree/runtime.memclrNoHeapPointers" target="_blank" rel="noopener noreferrer"><code>runtime.memclrNoHeapPointers</code></a> \u6216\u8005 <a href="https://draveness.me/golang/tree/runtime.memclrHasPointers" target="_blank" rel="noopener noreferrer"><code>runtime.memclrHasPointers</code></a> \u6E05\u9664\u76EE\u6807\u6570\u7EC4\u5185\u5B58\u7A7A\u95F4\u4E2D\u7684\u5168\u90E8\u6570\u636E\uFF0C\u5E76\u5728\u6267\u884C\u5B8C\u6210\u540E\u66F4\u65B0\u904D\u5386\u6570\u7EC4\u7684\u7D22\u5F15\u3002</p><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h3><h3 id="defer" tabindex="-1"><a class="header-anchor" href="#defer" aria-hidden="true">#</a> defer</h3><h3 id="panic-\u548C-recover" tabindex="-1"><a class="header-anchor" href="#panic-\u548C-recover" aria-hidden="true">#</a> panic \u548C recover</h3><h3 id="make-\u548C-new" tabindex="-1"><a class="header-anchor" href="#make-\u548C-new" aria-hidden="true">#</a> make \u548C new</h3><h2 id="\u5E76\u53D1" tabindex="-1"><a class="header-anchor" href="#\u5E76\u53D1" aria-hidden="true">#</a> \u5E76\u53D1</h2><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> context</h3><h3 id="\u540C\u6B65\u4E0E\u9501" tabindex="-1"><a class="header-anchor" href="#\u540C\u6B65\u4E0E\u9501" aria-hidden="true">#</a> \u540C\u6B65\u4E0E\u9501</h3><h3 id="\u5B9A\u65F6\u5668" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u65F6\u5668" aria-hidden="true">#</a> \u5B9A\u65F6\u5668</h3><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h3><h3 id="\u8C03\u5EA6\u5668" tabindex="-1"><a class="header-anchor" href="#\u8C03\u5EA6\u5668" aria-hidden="true">#</a> \u8C03\u5EA6\u5668</h3><h3 id="\u7F51\u7EDC\u8F6E\u8BE2\u5668" tabindex="-1"><a class="header-anchor" href="#\u7F51\u7EDC\u8F6E\u8BE2\u5668" aria-hidden="true">#</a> \u7F51\u7EDC\u8F6E\u8BE2\u5668</h3><h3 id="\u7CFB\u7EDF\u76D1\u63A7" tabindex="-1"><a class="header-anchor" href="#\u7CFB\u7EDF\u76D1\u63A7" aria-hidden="true">#</a> \u7CFB\u7EDF\u76D1\u63A7</h3><h2 id="\u5185\u5B58\u7BA1\u7406" tabindex="-1"><a class="header-anchor" href="#\u5185\u5B58\u7BA1\u7406" aria-hidden="true">#</a> \u5185\u5B58\u7BA1\u7406</h2><h3 id="\u5185\u5B58\u5206\u914D\u5668" tabindex="-1"><a class="header-anchor" href="#\u5185\u5B58\u5206\u914D\u5668" aria-hidden="true">#</a> \u5185\u5B58\u5206\u914D\u5668</h3><h3 id="\u5783\u573E\u6536\u96C6\u5668" tabindex="-1"><a class="header-anchor" href="#\u5783\u573E\u6536\u96C6\u5668" aria-hidden="true">#</a> \u5783\u573E\u6536\u96C6\u5668</h3><h3 id="\u6808\u5185\u5B58\u7BA1\u7406" tabindex="-1"><a class="header-anchor" href="#\u6808\u5185\u5B58\u7BA1\u7406" aria-hidden="true">#</a> \u6808\u5185\u5B58\u7BA1\u7406</h3><h2 id="\u5143\u7F16\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u5143\u7F16\u7A0B" aria-hidden="true">#</a> \u5143\u7F16\u7A0B</h2><h3 id="\u63D2\u4EF6\u7CFB\u7EDF" tabindex="-1"><a class="header-anchor" href="#\u63D2\u4EF6\u7CFB\u7EDF" aria-hidden="true">#</a> \u63D2\u4EF6\u7CFB\u7EDF</h3><h3 id="\u4EE3\u7801\u751F\u6210" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u751F\u6210" aria-hidden="true">#</a> \u4EE3\u7801\u751F\u6210</h3><h2 id="\u6807\u51C6\u5E93" tabindex="-1"><a class="header-anchor" href="#\u6807\u51C6\u5E93" aria-hidden="true">#</a> \u6807\u51C6\u5E93</h2><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h3><h3 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h3><h3 id="\u6570\u636E\u5E93" tabindex="-1"><a class="header-anchor" href="#\u6570\u636E\u5E93" aria-hidden="true">#</a> \u6570\u636E\u5E93</h3>`,96),o=[e];function c(i,l){return s(),a("div",null,o)}var r=n(p,[["render",c],["__file","2022-02-14-go-design.html.vue"]]);export{r as default};
